name: Release on Merge

on:
  pull_request:
    branches:
      - main
      - staging
    types:
      - closed

jobs:
  release:
    name: Create Release and Publish to PyPI
    runs-on: ubuntu-latest

    if: github.event.pull_request.merged == true

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Check if it's upstream and main branch
        run: |
          if [ "$GITHUB_REPOSITORY" != "flockx-official/fetchai" ]; then
            echo "Not the upstream repository. Skipping version bump."
            exit 0
          fi
          if [ "${{ github.event.pull_request.base.ref }}" != "main" ]; then
            echo "Not merging into main. Skipping version bump."
            exit 0
          fi

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'


      - name: Install dependencies
        run: |
          python -m venv venv
          source venv/bin/activate
          pip install --upgrade pip setuptools wheel
          pip install bump2version
          pip install twine

      - name: Configure git user
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Install and run Black
        run: |
          source venv/bin/activate
          pip install black
          black --check .  # Or modify to just format without checking

      - name: Get the new version
        id: get_version
        run: |
          source venv/bin/activate
          new_version=$(bump2version --list patch | grep new_version= | sed -r s,"^.*=",,)
          echo "New version is $new_version"
          echo "::set-output name=new_version::$new_version"
        shell: bash

      - name: Push changes and tags
        run: |
          git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/$GITHUB_REPOSITORY
          git push origin HEAD:main --follow-tags


      # Step 5: Generate release notes and create a GitHub release
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.get_version.outputs.new_version }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Build the package
        run: |
          source venv/bin/activate
          python setup.py sdist bdist_wheel

      - name: Publish to PyPI
        run: |
          source venv/bin/activate
          twine upload dist/*
        env:
          TWINE_USERNAME: "__token__"
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
